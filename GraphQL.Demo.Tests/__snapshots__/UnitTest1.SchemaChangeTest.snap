schema {
  query: UserQueries
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AddUserPayload {
  user: User
  errors: [UserError!]
}

"A connection to a list of items."
type AllUsersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AllUsersEdge!]
  "A flattened list of the nodes."
  nodes: [User!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type AllUsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User!
}

type ModifyUserPayload {
  user: User
  errors: [UserError!]
}

type Mutation {
  addUser(input: AddUserInput!): AddUserPayload!
  modifyUser(input: ModifyUserInput!): ModifyUserPayload!
  deleteUser(id: ID!): Boolean!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String
  companyName: String
  address: String
  city: String
  county: String
  postal: String
  phone1: String!
  phone2: String
  email: String!
  webUrl: String
}

type UserError {
  message: String!
  code: String!
}

type UserQueries {
  allUsers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UserFilterInput): AllUsersConnection
  userById(id: Int!): User!
}

input AddUserInput {
  firstName: String!
  lastName: String
  companyName: String
  address: String
  city: String
  county: String
  postal: String
  phone1: String!
  phone2: String
  email: String!
  webUrl: String
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

input ModifyUserInput {
  id: ID!
  firstName: String
  lastName: String
  companyName: String
  address: String
  city: String
  county: String
  postal: String
  phone1: String
  phone2: String
  email: String
  webUrl: String
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: IdOperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  companyName: StringOperationFilterInput
  city: StringOperationFilterInput
  county: StringOperationFilterInput
  postal: StringOperationFilterInput
  phone1: StringOperationFilterInput
  phone2: StringOperationFilterInput
  email: StringOperationFilterInput
}

directive @tag(name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
